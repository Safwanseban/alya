// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type AppEnum string

const (
	AppEnumApp1 AppEnum = "app1"
	AppEnumApp2 AppEnum = "app2"
	AppEnumApp3 AppEnum = "app3"
)

func (e *AppEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppEnum(s)
	case string:
		*e = AppEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for AppEnum: %T", src)
	}
	return nil
}

type NullAppEnum struct {
	AppEnum AppEnum `json:"app_enum"`
	Valid   bool    `json:"valid"` // Valid is true if AppEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppEnum) Scan(value interface{}) error {
	if value == nil {
		ns.AppEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppEnum), nil
}

type StatusEnum string

const (
	StatusEnumQueued  StatusEnum = "queued"
	StatusEnumInprog  StatusEnum = "inprog"
	StatusEnumSuccess StatusEnum = "success"
	StatusEnumFailed  StatusEnum = "failed"
	StatusEnumAborted StatusEnum = "aborted"
	StatusEnumWait    StatusEnum = "wait"
)

func (e *StatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusEnum(s)
	case string:
		*e = StatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusEnum: %T", src)
	}
	return nil
}

type NullStatusEnum struct {
	StatusEnum StatusEnum `json:"status_enum"`
	Valid      bool       `json:"valid"` // Valid is true if StatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.StatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatusEnum), nil
}

type Batch struct {
	ID          uuid.UUID             `json:"id"`
	App         AppEnum               `json:"app"`
	Op          string                `json:"op"`
	Context     json.RawMessage       `json:"context"`
	Inputfile   sql.NullString        `json:"inputfile"`
	Status      StatusEnum            `json:"status"`
	Reqat       time.Time             `json:"reqat"`
	Doneat      sql.NullTime          `json:"doneat"`
	Outputfiles pqtype.NullRawMessage `json:"outputfiles"`
	Nsuccess    sql.NullInt32         `json:"nsuccess"`
	Nfailed     sql.NullInt32         `json:"nfailed"`
	Naborted    sql.NullInt32         `json:"naborted"`
}

type Batchrow struct {
	Rowid    int32                 `json:"rowid"`
	Batch    uuid.UUID             `json:"batch"`
	Line     int32                 `json:"line"`
	Input    json.RawMessage       `json:"input"`
	Status   StatusEnum            `json:"status"`
	Reqat    time.Time             `json:"reqat"`
	Doneat   sql.NullTime          `json:"doneat"`
	Res      pqtype.NullRawMessage `json:"res"`
	Blobrows pqtype.NullRawMessage `json:"blobrows"`
	Messages pqtype.NullRawMessage `json:"messages"`
	Doneby   sql.NullString        `json:"doneby"`
}
