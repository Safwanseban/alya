// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package querybuilder

import (
	"context"
	"database/sql"
	"time"
)

const createVoucher = `-- name: CreateVoucher :one
INSERT INTO voucher (date, debit_account_id, credit_account_id, cost_centre_id, amount, narration)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, date, debit_account_id, credit_account_id, cost_centre_id, amount, narration
`

type CreateVoucherParams struct {
	Date            time.Time
	DebitAccountID  sql.NullInt64
	CreditAccountID sql.NullInt64
	CostCentreID    sql.NullInt64
	Amount          sql.NullString
	Narration       sql.NullString
}

func (q *Queries) CreateVoucher(ctx context.Context, arg CreateVoucherParams) (Voucher, error) {
	row := q.db.QueryRowContext(ctx, createVoucher,
		arg.Date,
		arg.DebitAccountID,
		arg.CreditAccountID,
		arg.CostCentreID,
		arg.Amount,
		arg.Narration,
	)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.DebitAccountID,
		&i.CreditAccountID,
		&i.CostCentreID,
		&i.Amount,
		&i.Narration,
	)
	return i, err
}

const getVoucher = `-- name: GetVoucher :one
SELECT id, date, debit_account_id, credit_account_id, cost_centre_id, amount, narration FROM voucher WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVoucher(ctx context.Context, id int64) (Voucher, error) {
	row := q.db.QueryRowContext(ctx, getVoucher, id)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.DebitAccountID,
		&i.CreditAccountID,
		&i.CostCentreID,
		&i.Amount,
		&i.Narration,
	)
	return i, err
}

const listVouchers = `-- name: ListVouchers :many
SELECT id, date, debit_account_id, credit_account_id, cost_centre_id, amount, narration FROM voucher
`

func (q *Queries) ListVouchers(ctx context.Context) ([]Voucher, error) {
	rows, err := q.db.QueryContext(ctx, listVouchers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Voucher
	for rows.Next() {
		var i Voucher
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.DebitAccountID,
			&i.CreditAccountID,
			&i.CostCentreID,
			&i.Amount,
			&i.Narration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVoucher = `-- name: UpdateVoucher :exec
UPDATE voucher
  set date = $2,
  debit_account_id = $3,
  credit_account_id = $4,
  cost_centre_id = $5,
  amount = $6,
  narration = $7
WHERE id = $1
`

type UpdateVoucherParams struct {
	ID              int64
	Date            time.Time
	DebitAccountID  sql.NullInt64
	CreditAccountID sql.NullInt64
	CostCentreID    sql.NullInt64
	Amount          sql.NullString
	Narration       sql.NullString
}

func (q *Queries) UpdateVoucher(ctx context.Context, arg UpdateVoucherParams) error {
	_, err := q.db.ExecContext(ctx, updateVoucher,
		arg.ID,
		arg.Date,
		arg.DebitAccountID,
		arg.CreditAccountID,
		arg.CostCentreID,
		arg.Amount,
		arg.Narration,
	)
	return err
}
