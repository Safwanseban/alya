// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createEmployee = `-- name: CreateEmployee :one

INSERT INTO Employees (name, title, department)
VALUES ($1, $2, $3)
    RETURNING employee_id
`

type CreateEmployeeParams struct {
	Name       sql.NullString `json:"name"`
	Title      sql.NullString `json:"title"`
	Department sql.NullString `json:"department"`
}

// Employees table
func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployee, arg.Name, arg.Title, arg.Department)
	var employee_id int32
	err := row.Scan(&employee_id)
	return employee_id, err
}

const createVoucher = `-- name: CreateVoucher :one

INSERT INTO Vouchers (employee_id, date_of_claim, amount, description)
VALUES ($1, $2, $3, $4)
    RETURNING voucher_id
`

type CreateVoucherParams struct {
	EmployeeID  int32          `json:"employee_id"`
	DateOfClaim time.Time      `json:"date_of_claim"`
	Amount      float64        `json:"amount"`
	Description sql.NullString `json:"description"`
}

// Vouchers table
func (q *Queries) CreateVoucher(ctx context.Context, arg CreateVoucherParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createVoucher,
		arg.EmployeeID,
		arg.DateOfClaim,
		arg.Amount,
		arg.Description,
	)
	var voucher_id int32
	err := row.Scan(&voucher_id)
	return voucher_id, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM Employees WHERE employee_id=$1
`

func (q *Queries) DeleteEmployee(ctx context.Context, employeeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, employeeID)
	return err
}

const deleteVoucher = `-- name: DeleteVoucher :exec
DELETE FROM Vouchers WHERE voucher_id=$1
`

func (q *Queries) DeleteVoucher(ctx context.Context, voucherID int32) error {
	_, err := q.db.ExecContext(ctx, deleteVoucher, voucherID)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT employee_id, name, title, department FROM Employees WHERE employee_id=$1
`

func (q *Queries) GetEmployee(ctx context.Context, employeeID int32) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, employeeID)
	var i Employee
	err := row.Scan(
		&i.EmployeeID,
		&i.Name,
		&i.Title,
		&i.Department,
	)
	return i, err
}

const getTotalClaimsPerEmployee = `-- name: GetTotalClaimsPerEmployee :many

SELECT e.employee_id, e.name, e.title, e.department, SUM(v.amount) as total_claims
FROM Employees e
         JOIN Vouchers v
              ON e.employee_id = v.employee_id
GROUP BY e.employee_id, e.name, e.title, e.department
`

type GetTotalClaimsPerEmployeeRow struct {
	EmployeeID  int32          `json:"employee_id" validate:"required"`
	Name        sql.NullString `json:"name"`
	Title       sql.NullString `json:"title"`
	Department  sql.NullString `json:"department"`
	TotalClaims int64          `json:"total_claims"`
}

// non-crud queries
func (q *Queries) GetTotalClaimsPerEmployee(ctx context.Context) ([]GetTotalClaimsPerEmployeeRow, error) {
	rows, err := q.db.QueryContext(ctx, getTotalClaimsPerEmployee)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalClaimsPerEmployeeRow
	for rows.Next() {
		var i GetTotalClaimsPerEmployeeRow
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Name,
			&i.Title,
			&i.Department,
			&i.TotalClaims,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVoucher = `-- name: GetVoucher :one
SELECT voucher_id, employee_id, date_of_claim, amount, description FROM Vouchers WHERE voucher_id=$1
`

func (q *Queries) GetVoucher(ctx context.Context, voucherID int32) (Voucher, error) {
	row := q.db.QueryRowContext(ctx, getVoucher, voucherID)
	var i Voucher
	err := row.Scan(
		&i.VoucherID,
		&i.EmployeeID,
		&i.DateOfClaim,
		&i.Amount,
		&i.Description,
	)
	return i, err
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE Employees SET name=$2, title=$3, department=$4 WHERE employee_id=$1
`

type UpdateEmployeeParams struct {
	EmployeeID int32          `json:"employee_id" validate:"required"`
	Name       sql.NullString `json:"name"`
	Title      sql.NullString `json:"title"`
	Department sql.NullString `json:"department"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployee,
		arg.EmployeeID,
		arg.Name,
		arg.Title,
		arg.Department,
	)
	return err
}

const updateVoucher = `-- name: UpdateVoucher :exec
UPDATE Vouchers SET employee_id=$2, date_of_claim=$3, amount=$4, description=$5 WHERE voucher_id=$1
`

type UpdateVoucherParams struct {
	VoucherID   int32          `json:"voucherId"`
	EmployeeID  int32          `json:"employee_id"`
	DateOfClaim time.Time      `json:"date_of_claim"`
	Amount      float64        `json:"amount"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateVoucher(ctx context.Context, arg UpdateVoucherParams) error {
	_, err := q.db.ExecContext(ctx, updateVoucher,
		arg.VoucherID,
		arg.EmployeeID,
		arg.DateOfClaim,
		arg.Amount,
		arg.Description,
	)
	return err
}
