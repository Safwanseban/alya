// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: rigel-queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/sqlc-dev/pqtype"
)

const checkSchemaExists = `-- name: CheckSchemaExists :one
SELECT EXISTS(SELECT 1 FROM schema WHERE id=$1)
`

func (q *Queries) CheckSchemaExists(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkSchemaExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createConfig = `-- name: CreateConfig :one
INSERT INTO config (name, description, active, tags, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, active, active_version_id, description, tags, created_by, updated_by, created_at, updated_at
`

type CreateConfigParams struct {
	Name        string                `json:"name"`
	Description sql.NullString        `json:"description"`
	Active      sql.NullBool          `json:"active"`
	Tags        pqtype.NullRawMessage `json:"tags"`
	CreatedBy   string                `json:"created_by"`
	UpdatedBy   string                `json:"updated_by"`
}

func (q *Queries) CreateConfig(ctx context.Context, arg CreateConfigParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, createConfig,
		arg.Name,
		arg.Description,
		arg.Active,
		arg.Tags,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Active,
		&i.ActiveVersionID,
		&i.Description,
		&i.Tags,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSchema = `-- name: CreateSchema :one
INSERT INTO schema (name, description, tags, active, active_version_id, created_by, updated_by, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
RETURNING id, name, active, active_version_id, description, tags, created_by, updated_by, created_at, updated_at
`

type CreateSchemaParams struct {
	Name            string                `json:"name"`
	Description     sql.NullString        `json:"description"`
	Tags            pqtype.NullRawMessage `json:"tags"`
	Active          sql.NullBool          `json:"active"`
	ActiveVersionID sql.NullInt32         `json:"active_version_id"`
	CreatedBy       sql.NullString        `json:"created_by"`
	UpdatedBy       sql.NullString        `json:"updated_by"`
}

func (q *Queries) CreateSchema(ctx context.Context, arg CreateSchemaParams) (Schema, error) {
	row := q.db.QueryRowContext(ctx, createSchema,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.Active,
		arg.ActiveVersionID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Schema
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Active,
		&i.ActiveVersionID,
		&i.Description,
		&i.Tags,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSchemaVersion = `-- name: CreateSchemaVersion :one
INSERT INTO schema_versions (schema_id, version, fields, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, schema_id, version, fields, created_by, updated_by, created_at, updated_at
`

type CreateSchemaVersionParams struct {
	SchemaID  sql.NullInt32   `json:"schema_id"`
	Version   string          `json:"version"`
	Fields    json.RawMessage `json:"fields"`
	CreatedBy string          `json:"created_by"`
	UpdatedBy string          `json:"updated_by"`
}

func (q *Queries) CreateSchemaVersion(ctx context.Context, arg CreateSchemaVersionParams) (SchemaVersion, error) {
	row := q.db.QueryRowContext(ctx, createSchemaVersion,
		arg.SchemaID,
		arg.Version,
		arg.Fields,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i SchemaVersion
	err := row.Scan(
		&i.ID,
		&i.SchemaID,
		&i.Version,
		&i.Fields,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
