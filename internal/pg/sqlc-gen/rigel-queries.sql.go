// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: rigel-queries.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createSchema = `-- name: CreateSchema :one
INSERT INTO schema (name, description, tags, active, active_version_id, created_by, updated_by, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
RETURNING id, name, active, active_version_id, description, tags, created_by, updated_by, created_at, updated_at
`

type CreateSchemaParams struct {
	Name            string                `json:"name"`
	Description     sql.NullString        `json:"description"`
	Tags            pqtype.NullRawMessage `json:"tags"`
	Active          sql.NullBool          `json:"active"`
	ActiveVersionID sql.NullInt32         `json:"active_version_id"`
	CreatedBy       sql.NullString        `json:"created_by"`
	UpdatedBy       sql.NullString        `json:"updated_by"`
}

func (q *Queries) CreateSchema(ctx context.Context, arg CreateSchemaParams) (Schema, error) {
	row := q.db.QueryRowContext(ctx, createSchema,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.Active,
		arg.ActiveVersionID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Schema
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Active,
		&i.ActiveVersionID,
		&i.Description,
		&i.Tags,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
